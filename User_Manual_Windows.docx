# User Manual for Setting Up the Project Locally on Windows

## Prerequisites
1. **Install Python**:
   - Download and install Python 3.10.13 from the [official Python website](https://www.python.org/downloads/).
   - During installation, ensure you check the box to add Python to your PATH.
   - Alternatively, use the command:
     ```
     winget install -e --id Python.Python.3.10
     ```

2. **Install Virtualenv**:
   - Open Command Prompt and run:
     ```
     pip install virtualenv
     ```

3. **Install a Code Editor** (Optional):
   - Install Visual Studio Code from [VS Code website](https://code.visualstudio.com/).

## Steps to Set Up the Project

1. **Download the Project Files**:
   - Obtain the project files from the provided source (e.g., USB, shared drive, or download link).

2. **Navigate to the Project Directory**:
   - Run:
     ```
     cd <project-folder>
     ```
   - Replace `<project-folder>` with the name of the project folder.

3. **Create a Virtual Environment**:
   - Run:
     ```
     python -m venv .venv
     ```

4. **Activate the Virtual Environment**:
   - Run:
     ```
     .venv\Scripts\activate
     ```

5. **Install Dependencies**:
   - Run:
     ```
     pip install -r requirements.txt
     ```

6. **Set Up Environment Variables**:
   - Create a `.env` file in the project root directory.
   - Add the following environment variables:
     ```
    - Make a ".env" file and paste this text inside of it 

    GOOGLE_API_KEY=AIzaSyDe_fv2Zp5mt1J5eBJchgawQOoTCVWwMuY
    GOOGLE_CSE_ID=341455ca25b1d4a05
    GOOGLE_APPLICATION_CREDENTIALS=/Users/hamzhax/Downloads/Final year project/gcloud_credentials/credentials.json
    PROJECT_ID=potent-result-250006
    LOCATION=us-central1
    ASYNC_AUTO=1
    GEMINI_MODEL=gemini-1.5-flash
    UPLOAD_FOLDER=uploads
    USERS_FILE=users.json
    DATASETS_META=datasets.json
    MAX_UPLOAD_MB=80
    ALLOWED_ORIGINS=http://127.0.0.1:5500,http://localhost:5500
    CELERY_BROKER_URL=redis://localhost:6379/0
    CELERY_RESULT_BACKEND=redis://localhost:6379/0
    SESSION_COOKIE_SAMESITE=Lax
    SESSION_COOKIE_SECURE=0


7. **Run the Application**:
   - Start the Flask application by running:
     ```
     python app.py
     ```

8. **Access the Application**:
   - Open a web browser and go to:
     ```
     http://127.0.0.1:5050
     ```

## How to Use the Application

### **1. Logging In**
- Open your web browser and navigate to the application URL (e.g., `http://127.0.0.1:5050`).
- Enter your username and password on the login page.
- Click the **Sign In** button to access the dashboard.

### **2. Uploading a Dataset**
- Navigate to the **Admin** section from the navigation bar.
- Under the **Datasets** panel, click the **Upload Dataset** button.
- Select the file you want to upload and confirm.
- The uploaded dataset will appear in the list of available datasets.

### **3. Running Auto Explore**
- Go to the **Analysis** section.
- Click the **One-Click Auto Explore** button.
- Wait for the analysis to complete. You will be redirected to the **Visualize** section.

### **4. Viewing Analysis Results**
- In the **Visualize** section, you can view various charts and insights:
  - **Value Counts**: Displays the frequency distribution of categorical data.
  - **Correlation Matrix**: Shows relationships between numeric variables.
  - **K-Means Clustering**: Visualizes data clusters.
  - **Association Rules**: Highlights relationships between categorical variables.
  - **Summary Statistics**: Provides descriptive metrics for the dataset.

### **5. Generating Reports**
- Navigate to the **Admin** section.
- Use the **Markdown** or **PDF** buttons to generate reports.
- Download the generated reports for sharing or documentation.

### **7. Managing Users**
- In the **Admin** section, under the **Users** panel:
  - Add new users by entering their username, temporary password, and role.
  - View the list of existing users.
  - Refresh the user list as needed.

### **8. Troubleshooting**
- **Port Already in Use**: If you encounter a port conflict, run the application on a different port using the command:
  ```
  python app.py --port=5000
  ```
- **Missing Dependencies**: Ensure all dependencies are installed by running:
  ```
  pip install -r requirements.txt
  ```
- **Virtual Environment Issues**: Ensure the virtual environment is activated before running the application.

